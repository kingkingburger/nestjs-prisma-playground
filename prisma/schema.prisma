// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 Int                  @id @default(autoincrement())
  email              String               @unique
  password           String
  name               String?              @unique
  profilePicture     String?
  Post               Post[]
  Comment            Comment[]
  Notification       Notification[]
  ActivityLog        ActivityLog[]
  PostRecommendation PostRecommendation[] @relation("UserToPostRecommendation") // 반대 관계 필드 설정
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
}

model PostRecommendation {
  id        Int      @id @default(autoincrement())
  userId    Int
  User      User     @relation(fields: [userId], references: [id], name: "UserToPostRecommendation") // 명시적 관계 이름
  postId    Int
  Post      Post     @relation(fields: [postId], references: [id], name: "PostToPostRecommendation") // 명시적 관계 이름
  createdAt DateTime @default(now())
}

model Post {
  id                 Int                  @id @default(autoincrement())
  title              String
  content            String?
  published          Boolean              @default(true)
  viewCount          Int                  @default(0)
  recommendCount     Int                  @default(0)
  Comment            Comment[]
  categoryId         Int?
  Category           Category?            @relation(fields: [categoryId], references: [id])
  userId             Int?
  User               User?                @relation(fields: [userId], references: [id])
  PostRecommendation PostRecommendation[] @relation("PostToPostRecommendation") // 반대 관계 필드 설정
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String
  postId    Int?
  Post      Post?     @relation(fields: [postId], references: [id])
  userId    Int?
  User      User?     @relation(fields: [userId], references: [id])
  parentId  Int?
  Parent    Comment?  @relation("CommentToComment", fields: [parentId], references: [id])
  Children  Comment[] @relation("CommentToComment")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  posts Post[]
}

model Notification {
  id        Int      @id @default(autoincrement())
  message   String
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  createdAt DateTime @default(now())
  read      Boolean  @default(false)
}

model ActivityLog {
  id        Int      @id @default(autoincrement())
  action    String
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  createdAt DateTime @default(now())
}
